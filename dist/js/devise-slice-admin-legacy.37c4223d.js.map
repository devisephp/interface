{"version":3,"file":"js/devise-slice-admin-legacy.37c4223d.js","mappings":"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","sources":["webpack://devisephp-interface/./node_modules/decode-uri-component/index.js","webpack://devisephp-interface/./node_modules/filter-obj/index.js","webpack://devisephp-interface/./node_modules/query-string/index.js","webpack://devisephp-interface/./node_modules/split-on-first/index.js","webpack://devisephp-interface/./node_modules/strict-uri-encode/index.js"],"sourcesContent":["'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn decodeURIComponent(components.join(''));\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher);\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n","'use strict';\nmodule.exports = function (obj, predicate) {\n\tvar ret = {};\n\tvar keys = Object.keys(obj);\n\tvar isArr = Array.isArray(predicate);\n\n\tfor (var i = 0; i < keys.length; i++) {\n\t\tvar key = keys[i];\n\t\tvar val = obj[key];\n\n\t\tif (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {\n\t\t\tret[key] = val;\n\t\t}\n\t}\n\n\treturn ret;\n};\n","'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\nconst filterObject = require('filter-obj');\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), ':list='].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), ':list=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSep = options.arrayFormat === 'bracket-separator' ?\n\t\t\t\t'[]=' :\n\t\t\t\t'=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(:list)$/.exec(key);\n\t\t\t\tkey = key.replace(/:list$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tcase 'bracket-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[\\])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null ?\n\t\t\t\t\t[] :\n\t\t\t\t\tvalue.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], arrayValue);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction parse(query, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn ret;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of query.split('&')) {\n\t\tif (param === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tfor (const key of Object.keys(ret)) {\n\t\tconst value = ret[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const k of Object.keys(value)) {\n\t\t\t\tvalue[k] = parseValue(value[k], options);\n\t\t\t}\n\t\t} else {\n\t\t\tret[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ','\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key])) ||\n\t\t(options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const key of Object.keys(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = object[key];\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (url, options) => {\n\toptions = Object.assign({\n\t\tdecode: true\n\t}, options);\n\n\tconst [url_, hash] = splitOnFirst(url, '#');\n\n\treturn Object.assign(\n\t\t{\n\t\t\turl: url_.split('?')[0] || '',\n\t\t\tquery: parse(extract(url), options)\n\t\t},\n\t\toptions && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}\n\t);\n};\n\nexports.stringifyUrl = (object, options) => {\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\t[encodeFragmentIdentifier]: true\n\t}, options);\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = exports.extract(object.url);\n\tconst parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});\n\n\tconst query = Object.assign(parsedQueryFromUrl, object.query);\n\tlet queryString = exports.stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\thash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n};\n\nexports.pick = (input, filter, options) => {\n\toptions = Object.assign({\n\t\tparseFragmentIdentifier: true,\n\t\t[encodeFragmentIdentifier]: false\n\t}, options);\n\n\tconst {url, query, fragmentIdentifier} = exports.parseUrl(input, options);\n\treturn exports.stringifyUrl({\n\t\turl,\n\t\tquery: filterObject(query, filter),\n\t\tfragmentIdentifier\n\t}, options);\n};\n\nexports.exclude = (input, filter, options) => {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn exports.pick(input, exclusionFilter, options);\n};\n","'use strict';\n\nmodule.exports = (string, separator) => {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (separator === '') {\n\t\treturn [string];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [string];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n};\n","'use strict';\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n"],"names":["token","singleMatcher","RegExp","multiMatcher","decodeComponents","components","split","decodeURIComponent","join","err","length","left","slice","right","Array","prototype","concat","call","decode","input","tokens","match","i","customDecodeURIComponent","replaceMap","exec","result","entries","Object","keys","key","replace","module","exports","encodedURI","TypeError","obj","predicate","ret","isArr","isArray","val","indexOf","strictUriEncode","decodeComponent","splitOnFirst","filterObject","isNullOrUndefined","value","undefined","encodeFragmentIdentifier","Symbol","encoderForArrayFormat","options","arrayFormat","index","skipNull","skipEmptyString","encode","keyValueSep","arrayFormatSeparator","parserForArrayFormat","accumulator","includes","isEncodedArray","newValue","map","item","test","arrayValue","validateArrayFormatSeparator","strict","encodeURIComponent","keysSorter","sort","a","b","Number","removeHash","hashStart","getHash","url","hash","extract","queryStart","parseValue","parseNumbers","isNaN","trim","parseBooleans","toLowerCase","parse","query","assign","formatter","create","param","k","reduce","Boolean","stringify","object","shouldFilter","objectCopy","filter","x","parseUrl","url_","parseFragmentIdentifier","fragmentIdentifier","stringifyUrl","queryFromUrl","parsedQueryFromUrl","queryString","pick","exclude","exclusionFilter","string","separator","separatorIndex","str","charCodeAt","toString","toUpperCase"],"sourceRoot":""}